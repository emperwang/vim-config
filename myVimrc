" 控制
:set  backspace=2    " 能使用backspace回删
:syntax on                " 语法检测
":set mouse=a            " 设置可以再VIM使用鼠标
:set mouse=                " 关闭鼠标
:set history=1000        " 设置历是记录条数
:set nocompatible       " 设置不兼容
filetype off                  " 关闭文件类型侦测,   vundle需要
:set fileencodings=utf-8,GBK  "使用utf-8和gbk编码方式
:set confirm                  " 在处理未保存或只读文件时,  弹出确认信息
:set  nobackup            "不使用备份
:set  whichwrap=<,>,[,]    "当光标到行首或行尾, 允许左右方向键换行
:set  autoread                "文件在vim外修改过, 自动重载
:set selection=inclusive    "选择包含最后一个字符
:set selectmode=mouse,key    "启动选择模式的方式
:set completeopt=longest,menu  " 只能补全,  弹出菜单,  无歧义时在自动填充
:set noswapfile            " 关闭交换文件
:set  hidden                    " 允许在有为保存的修改时切换缓冲区


" 显示
:set number    "设置显示行号
:set ruler              "显示最后一行的状态, 标尺
:set background=dark            " 背景色设置
:set hlsearch             " 高亮度反白
:set laststatus=2        " 两行 状态行+一行命令行
:set cindent             " 设置c语言自动对齐
:set t_Co=256            " 设置指定配色方案为256
:set showcmd             " 显示输入的命令
:set showmatch             "高亮括号匹配
:set matchtime=1         "匹配括号高亮的时间(十分之一秒)
:set matchpairs={:},(:)  " 匹配括号
:set incsearch           "边检索边显示匹配
:set go-=T               " 去除gvim的toolbar
:set linebreak			 "整词换行

"格式
:set noexpandtab        "不要将tab转换为空格
:set shiftwidth=4         "自动缩进的距离, 也是平移字符的距离
:set tabstop=4            " tab键对应的空格数
:set autoindent            " 自动缩进
:set smartindent           "智能缩进


"********************************************************************************************************************************************
" vundle
" set the runtime path to include Vundle and initialize
"set rtp+=~/.vim/bundle/Vundle.vim
"call vundle#begin('~/.vim/plugin')
"call vundle#begin()
" let Vundle manage Vundle, required
"Plugin 'VundleVim/Vundle.vim'
"Plugin 'preservim/nerdtree'
"call vundle#end()            " required
"filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


"********************************************************************************************************************************************
call plug#begin()
" 侧边栏
Plug 'preservim/nerdtree', { 'on':  'NERDTreeToggle' }
" 底部状态栏修饰
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" tags 方便查看code
Plug 'esukram/vim-taglist'
" 自动补全括号
Plug 'jiangmiao/auto-pairs'
" 多颜色显示 括号
Plug 'kien/rainbow_parentheses.vim'
"Plug 'frazrepo/vim-rainbow'
" 显示行尾空格符
Plug 'bronson/vim-trailing-whitespace'
" 注释工具
Plug 'preservim/nerdcommenter'
"Plug 'sjl/gundo.vim'
" 无限回滚
Plug 'mbbill/undotree'
" 语法检测
Plug 'vim-syntastic/syntastic'
"代码自动补全
"Plug 'tabnine/YouCompleteMe'
"vim theme
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'
" 可以模糊查找文件
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

call plug#end()



"********************************************************************************************************************************************
" NerdTree的设置 并且相对行号显示
" plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
" :ERDtree 打开NERD_tree         :NERDtreeClose    关闭NERD_tree
" o 打开关闭文件或者目录         t 在标签页中打开
" T 在后台标签页中打开           ! 执行此文件
" p 到上层目录                   P 到根目录
" K 到第一个节点                 J 到最后一个节点
" u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）
" r 递归刷新当前目录             R 递归刷新当前根目录
"NERDTree配置
autocmd vimenter * NERDTree  "自动开启Nerdtree
let NERDChristmasTree=1 "显示增强
let NERDTreeAutoCenter=1 "自动调整焦点
let NERDTreeShowFiles=1 "显示文件
let NERDTreeShowLineNumbers=1 "显示行号
let NERDTreeHightCursorline=1 "高亮当前文件
let NERDTreeShowHidden=0 "显示隐藏文件
let NERDTreeMinimalUI=0 "不显示'Bookmarks' label 'Press ? for help'
let NERDTreeWinSize=31 "窗口宽度
"当NERDTree为剩下的唯一窗口时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"打开vim时如果没有文件自动打开NERDTree
autocmd vimenter * if !argc()|NERDTree|endif
"Making it prettier
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1


"********************************************************************************************************************************************
"taglist
let Tlist_Ctags_Cmd='ctags'
let Tlist_Show_One_File=1               "不同时显示多个文件的tag，只显示当前文件的
let Tlist_WinWidt =28                   "设置taglist的宽度
let Tlist_Exit_OnlyWindow=1             "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window=1           "在右侧窗口中显示taglist窗口
"let Tlist_Use_Left_Windo =1             "在左侧窗口中显示taglist窗口
"command
":TlistOpen   " open Tlist
":TlistClose
":TlistToggle

"********************************************************************************************************************************************
"cscope
if  has("cscope")
    set  cscopetag  " 支持使用 ctrl+] 和 ctrl+t 快捷键在代码间跳来跳去
    " check cscope for definition of a symbol before checking ctags
    " set to 1 if you want  the reverse search order
    set csto=1

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add the database pointed to by enviroment variable
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope d added
    set cscopeverbose

    nmap <C-/>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>f :cs find f <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>i :cs find i ^<C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif


"********************************************************************************************************************************************
"ctags
"判断当前目录是否存在 tags,如果存在就添加
if filereadable("tags")
	set tag=tags
endif
"********************************************************************************************************************************************
"auto-pairs config
let g:AutoPairsFlyMode = 1


"********************************************************************************************************************************************
"vim-rainbow config
":RainbowToggle  --you can use it to toggle this plugin.
":RainbowLoad    --you can use it to load/reload this plugin.
"au FileType c,cpp,objc,objcpp call rainbow#load()
"let g:rainbow_active = 1
"let g:rainbow_load_separately = [
"    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
"    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
"    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
"    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
"    \ ]
"let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
"let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']

"********************************************************************************************************************************************
"rainbow_parentheses
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
""" always on
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
"command
":RainbowParenthesesToggle       " Toggle it on/off
":RainbowParenthesesLoadRound    " (), the default when toggling
":RainbowParenthesesLoadSquare   " []
":RainbowParenthesesLoadBraces   " {}
":RainbowParenthesesLoadChevrons " <>

"********************************************************************************************************************************************
"vim-trailing-whitespace
map <leader><space> :FixWhitespace<cr>


"********************************************************************************************************************************************
" nerdcommenter
" 注释的时候添加空格
let g:NERDSpaceDelims=1
" Create default mappings
"let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
"let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
"let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
"let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
"let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
"" command
"1、 \cc 注释当前行和选中行
"2、 \cn 没有发现和\cc有区别
"3、 \c<空格> 如果被选区域有部分被注释，则对被选区域执行取消注释操作，其它情况执行反转注释操作
"4、 \cm 对被选区域用一对注释符进行注释，前面的注释对每一行都会添加注释
"5、 \ci 执行反转注释操作，选中区域注释部分取消注释，非注释部分添加注释
"6、 \cs 添加性感的注释，代码开头介绍部分通常使用该注释
"7、 \cy 添加注释，并复制被添加注释的部分
"8、 \c$ 注释当前光标到改行结尾的内容
"9、 \cA 跳转到该行结尾添加注释，并进入编辑模式
"10、\ca 转换注释的方式，比如： /**/和//
"11、\cl \cb 左对齐和左右对其，左右对其主要针对/**/
"12、\cu 取消注释
"[count]<leader>cc |NERDCommenterComment|
"Comment out the current line or text selected in visual mode.
"
"[count]<leader>cn |NERDCommenterNested|
"Same as cc but forces nesting.
"
"[count]<leader>c<space> |NERDCommenterToggle|
"Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.
"
"[count]<leader>cm |NERDCommenterMinimal|
"Comments the given lines using only one set of multipart delimiters.
"
"[count]<leader>ci |NERDCommenterInvert|
"Toggles the comment state of the selected line(s) individually.
"
"[count]<leader>cs |NERDCommenterSexy|
"Comments out the selected lines with a pretty block formatted layout.
"
"[count]<leader>cy |NERDCommenterYank|
"Same as cc except that the commented line(s) are yanked first.
"
"<leader>c$ |NERDCommenterToEOL|
"Comments the current line from the cursor to the end of line.
"
"<leader>cA |NERDCommenterAppend|
"Adds comment delimiters to the end of line and goes into insert mode between them.
"
"|NERDCommenterInsert|
"Adds comment delimiters at the current cursor position and inserts between. Disabled by default.
"
"<leader>ca |NERDCommenterAltDelims|
"Switches to the alternative set of delimiters.
"
"[count]<leader>cl |NERDCommenterAlignLeft [count]<leader>cb |NERDCommenterAlignBoth
"Same as |NERDCommenterComment| except that the delimiters are aligned down the left side (<leader>cl) or both sides (<leader>cb).
"
"[count]<leader>cu |NERDCommenterUncomment|
"Uncomments the selected line(s).

"********************************************************************************************************************************************
" gundo 时光机
" error: Gundo requires Vim to be compiled with Python 2.4+


"********************************************************************************************************************************************
" undotree
"command
":UndotreeToggle
":UndotreeHide
":UndotreeShow
":UndotreeFocus
"nnoremap <F6> :UndotreeToggle<cr>
set undodir=~/.undodir/
set undofile

"********************************************************************************************************************************************
"syntastic
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
" nnoremap <Leader>sn :lnext<cr>
" nnoremap <Leader>sp :lprevious<cr>
"""command"""
":Errors 显示错误面板
":lnext  到下一个错误
":lprevious 到上一个错误

"********************************************************************************************************************************************
" 生成索引文件快捷键
"Generate tags and cscope.out from FileList.txt (c, cpp, h, hpp)
nmap <C-t>s :!find -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" > FileList.txt<CR>
                       \ :!ctags -L -< FileList.txt<CR>
                       \ :!cscope -bkq -i FileList.txt<CR>

"********************************************************************************************************************************************
"颜色主题
"solarize 主题 config
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"

" molokai theme
let g:molokai_original = 1
"let g:rehash256 = 1

" open solarized theme
colorscheme solarized
"colorscheme molokai


"********************************************************************************************************************************************
" airline (底部状态栏theme)
set laststatus=2  "永远显示状态栏
let g:airline_powerline_fonts = 1  " 支持 powerline 字体
let g:airline#extensions#tabline#enabled = 1 "显示窗口tab和buffer
"https://github.com/vim-airline/vim-airline-themes/blob/master/doc/airline-themes.txt
"这里可以查看具体的theme
"let g:airline_theme='moloai'
"let g:airline_theme='murmur'  " murmur配色不错
let g:airline_theme='cool'

if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '|'
let g:airline_symbols.branch = '⎇'

"command
":help airline  "查看帮助文档vim-airline-themes

"********************************************************************************************************************************************
"LeaderF
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

"command
"https://github.com/Yggdroot/LeaderF  可用的命令查看
":LeaderfFile   " 查找文件
":LeaderfBuffer "搜索当前的buffer
":LeaderfMru    "所搜最近使用过的文件(search most recently used file)
":LeaderfLine   " 搜索当前文件中的某个单词
":LeaderfFunction " 搜索当前文件的函数

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************
"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************

"********************************************************************************************************************************************
